{
  "title": "Dependency Shadowing",
  "summary": "There are two types of dependencies when you are working with micro-frontends. Runtime and Build-Time. Each of them has its own pros and cons. It is important to choose the one that works in your situation. Basically, both types fix a part of the problem.",
  "publishedDate": "2023-09-23T00:00:00.000Z",
  "tags": [
    "micro-frontend",
    "react"
  ],
  "category": "react",
  "body": {
    "raw": "\nThere are two types of dependencies when you are working with micro-frontends.\n\n- Runtime: These are dependencies that are not included in the initial bundle. When your application runs, all these types of dependencies are loaded on the fly.\n\n- Build-Time: These are dependencies that are bundled when building your application.\n\nEach of them has its own pros and cons. It is important to choose the one that works in your situation. Basically, both types fix a part of the problem.\n\nWhen you need to package a feature, version it, and put it in an NPM-like registry, a build-time dependency works great. On the other side, when you need to have that “on-the-fly-update” kind of behavior, runtime is the choice.\n\nWith all the benefits that build-time dependencies bring, there is one important drawback. Consider that you have multiple MFEs, all requiring a build-time dependency. Changing that dependency results in updating all MFEs, in case they need that change.\n",
    "html": "<p>There are two types of dependencies when you are working with micro-frontends.</p>\n<ul>\n<li>\n<p>Runtime: These are dependencies that are not included in the initial bundle. When your application runs, all these types of dependencies are loaded on the fly.</p>\n</li>\n<li>\n<p>Build-Time: These are dependencies that are bundled when building your application.</p>\n</li>\n</ul>\n<p>Each of them has its own pros and cons. It is important to choose the one that works in your situation. Basically, both types fix a part of the problem.</p>\n<p>When you need to package a feature, version it, and put it in an NPM-like registry, a build-time dependency works great. On the other side, when you need to have that “on-the-fly-update” kind of behavior, runtime is the choice.</p>\n<p>With all the benefits that build-time dependencies bring, there is one important drawback. Consider that you have multiple MFEs, all requiring a build-time dependency. Changing that dependency results in updating all MFEs, in case they need that change.</p>"
  },
  "_id": "dependency-shadowing.md",
  "_raw": {
    "sourceFilePath": "dependency-shadowing.md",
    "sourceFileName": "dependency-shadowing.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "dependency-shadowing"
  },
  "type": "Post",
  "url": "/posts/dependency-shadowing"
}