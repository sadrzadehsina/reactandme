{
  "title": "Erik Grijzen - Software Engineer",
  "category": "nested",
  "parent": "what-other-say-about-micro-frontend",
  "body": {
    "raw": "\n<div className=\"bg-blue-600 border-blue-950 border-r-4 border-b-4 px-4 py-2\">Read this summary</div>\n\nAt New Relic, we adopted a micro-frontends architecture to address issues related to user experience consistency, UI extensibility, and inefficiencies in development. Our previous monolithic single-page applications resulted in inconsistent UI and forced users to switch between different apps, losing context. By shifting to micro-frontends, we enabled teams to work autonomously, focusing on specific business domains, which sped up development and improved code quality. Automation and standardization were crucial to managing the resulting multiple codebases, allowing teams to build faster with less repetitive work.\n\nWhile micro-frontends provided significant benefits like team autonomy and easier scaling, we faced challenges in maintaining UX consistency and performance. To mitigate this, we introduced constraints, such as requiring teams to use specific technologies and maintaining a centralized design system. We also optimized performance through strategies like lazy loading, code-splitting, and deduplicating dependencies. This architecture worked well for large-scale development but comes with trade-offs that smaller projects may not need. Proper infrastructure, tools, and communication are essential for success with micro-frontends.\n\n<hr />\n\n<h3>What is your experience with micro-frontends?</h3>\n\nMy experience with micro-frontends has been solely working on this new\nplatform within New Relic over the last three years. Let me give you some\ncontext on how we ended up deciding to use this architecture, because I\nthink this is quite interesting and I believe many other companies find\nthemselves in a similar position.\n\nNew Relic is a fast-growing company, and in the last 10 years, it has built\nmany different products. All these products were built separately as\nmonolithic single-page applications that were linked together through one\ncommon navigation. This approach was very successful until more or less\nthree years ago, when we discovered that we had several problems related\nto the consistency of our user experience, extensibility of our UI, and the\nway we did UI development within our company. Let me go over each one\nof these problems to explain them a bit more in depth.\n\nMany of our customers were starting to have more and more complex\nsystems because they were adapting to a microservices architecture and\nmoving towards the cloud. As a result of this, our users were forced to\nswitch constantly between our separate applications to troubleshoot\nproblems in their systems. Despite all the best efforts of our UI engineers,\nour products were all working and looking slightly different (in some cases\nvery different), which led to undesirable user experiences. On top of that,\nswitching between applications also caused our users to lose the context of\nthe issues that they were troubleshooting, which was an even bigger\nproblem.\n\nThe landscape of technology (software, tools, programming languages,\nintegrations, open source, etc.) that our customers wanted to instrument and\nobserve was (and still is) exploding. It’s almost impossible to keep up, so it\nwas clear that we wanted a new approach where we could provide new\nfunctionality for our users in an easy and fast manner. Besides that, we also\nnoticed that some customers had very specific use cases that only applied to\nthem. To also cover these cases, we wanted to provide a way to make our\nuser interfaces programmable so that they could extend the platform for\ntheir specific needs.\n\nWe also saw that inside our company, many UI engineers were doing a lot\nof duplicate efforts regarding project setup, tooling, configuration, etc. We\nwanted to reduce the toil and boilerplate that each team has to go through to\nbuild new features so that they could spend more time on building\ninnovative and creative product solutions for our users.\n\nIt turned out that a micro-frontends architecture was a perfect fit for us to\ntackle these problems. Users are demanding more unified product\nexperiences, but it’s not easy to build a product with hundreds of UI\nengineers at the same time, especially when they are located in different\noffices around the world and in different time zones. And in our case,\nallowing customers to build on top of the platform as well made the\nproblem even more difficult. In the end, we decided that a micro-frontend\narchitecture was how we wanted to scale our UI development within our\norganization.\n\n<h3>\n  What benefits and pitfalls did you encounter in your journey with\n  micro-frontends?\n</h3>\n\nIn our experience, this architecture has very similar benefits and downsides\nthat you can expect from using a microservices architecture on the backend.\nHowever, there are a few exceptions to this due to the nature of how\nbrowsers work.\n\nLet’s start with the benefits. I believe the main topics that we should cover\nwhere we noticed the biggest differences are the following:\n\n* Team autonomy\n* Small and decoupled codebases\n* Modeled around a business domain\n* Automation and standardization\n\nTo scale the UI development inside our organization, the most important\nthing we wanted to achieve was for teams to work autonomously. They\nshould be able to deploy new code whenever and as many times as they\nwant without depending on any other team. Each team should be crossfunctional, meaning they have every role (designer, frontend engineer,\nbackend engineer, QA engineer, etc.) on the team to build the functionality\nthey want, so that they can do a complete end-to-end implementation. This\nmeans they have full ownership and can take all the responsibility for one\nor more related micro-frontends that are part of a specific business domain.\n\nThis is important because this allows parallel development without slowing\ndown when more and more teams are working on our platform.\n\nTo achieve this autonomy from a technical point of view, the microfrontends must be loosely coupled, so that they don’t depend on each other,\nand whenever they interact they should have clear contracts. Each microfrontend is also small in size so that they are easier to reason about (you\ndon’t need to know the whole system), easier to test, and you can easily\nadd, change, or remove them over time.\n\nOur micro-frontends are modeled around a business domain or subdomain,\nbecause this aligns better with the structure of our business. It creates fewer\nteam dependencies, gives teams more autonomy, and improves the\ncommunication to make quick decisions so that teams can iterate over\nfeatures faster. To give a more concrete example, one team could be\norganized around the domain of NodeJS application monitoring. They are\nhighly specialized and are subject-matter experts on that topic, which\ntypically results in higher-quality code and better solutions for our end\nusers.\n\nWith our micro-frontend architecture setup, we moved from several\nmonolithic single-page applications to many small micro-frontends that are\ncomposed at runtime into one unified platform. This resulted in an\nexplosion of a lot of small codebases, which are each owned by separate\nteams. It was very important to be prepared for this because this\narchitecture introduces a lot of repetitive work and duplication. That’s why\nit’s very important to have the proper infrastructure, tools, and\nstandardization in place. We automated every step in the development\nprocess, from project creation and pipeline build to continuous integration\nand continuous deployment, basically providing everything that the team\nneeds, so they can focus on building functionality that our users love.\n\nLet’s move now to some of the pitfalls we encountered using microfrontends. In our journey, the two hardest parts were:\n\n* UX consistency\n* Performance\n\nEvery architecture comes with trade-offs. I don’t think we have a perfect\nsolution to make the UI always consistent and performant, but we try to\nmitigate the downsides as much as we can. In most cases, this means\nputting certain constraints in place and reducing the autonomy of teams. For\nexample, we have a constraint in place that every team should use a specific\nversion of the ReactJS library to build their user interfaces. This obviously\nlimits the teams from using any technology they want, but we think it’s\nworth it because this constraint reduces the performance costs a lot for our\nusers. We don’t want to limit innovation in the organization, but when we\ntry out new technologies and we carefully evaluate the impact it has on the\nsystem, we then update the organization standards and move this innovation\nto the platform level, so that everyone can benefit from it.\n\nWhen you have many teams working on the same platform, the consistency\nof the UI is at risk. To reduce this downside as much as possible, we think\nit’s critical to at least have a design system in place. This won’t magically\nmake everything consistent, but I think without it, you will definitely be in a\nworld of trouble. In our experience, this design system is best owned and\nmaintained by one team. This doesn’t mean others cannot contribute, but\nthere’s one team making sure it aligns with the bigger picture.\n\nWe’ve tried an open source model where everyone could contribute to the\ndesign system, but this didn’t work out for us, because when everyone is\nresponsible for it, nobody is responsible for it. Maintenance work, bug\nfixes, and keeping everything aligned with the bigger picture are especially\nhard to do in this setup. To further improve consistency, we also\nimplemented an SDK that all micro-frontends have access to. This SDK has\nall the UI components from our design system and provides several APIs to\nstandardize certain patterns such as navigating around the platform.\n\nTo make sure our platform stays as performant as possible, we have several\nthings in place. First of all, the platform is built with the application shell\nmodel, which makes it very minimal and fast-loading to achieve a good\ninitial perceived performance for the users. When the platform is loaded, we\nlazy-load the micro-frontends based on the client-side routing, which allows\nus to only load the minimal JavaScript and CSS necessary to render the\nscreen. To reduce the payload size of the assets we load and memory\nconsumption of the application, we think it’s necessary to deduplicate the\nfrontend dependencies as much as possible. On the platform level, we\nprovide some dependencies (i.e., ReactJS) that we are sure every microfrontend is going to need. We do that by defining those dependencies as\nwebpack externals so that these don’t get bundled up for each microfrontend. This alone reduces the bundle sizes by an incredible amount. For\neach repository that contains micro-frontends, we are code-splitting the\nbundles so that we can lazy-load them incrementally at runtime inside the\nplatform. The last thing we do is provide the previously mentioned SDK on\nthe platform level by injecting it in each micro-frontend. This reduces the\nneed to use other npm dependencies, which should decrease bundle sizes\neven more.\n\n<h3>\n  Did you contribute to any OSS project related to microfrontends? If so, which\n  one?\n</h3>\n\nNo, I’m not contributing to any open source projects at the moment. I\nlooked into several of the bigger micro-frontend frameworks and libraries a\nwhile back, but none of them really matched with how we wanted this\narchitecture to look for our platform.\n\nI’ve been asked several times if we will open source what we’ve built at\nNew Relic. Unfortunately, we don’t have any plans to do so. I think that\nwhat we have right now is too tailored for our needs, and we would have to\nchange it quite a bit before it would make sense to release it to the public.\n\n<h3>\n  When would you suggest using micro-frontends, and when should we avoid them?\n</h3>\n\nUsing an architecture like this comes with a lot of trade-offs that have to be\nevaluated carefully and need to make sense for your project and company.\nTypically, the benefits outweigh the downsides when you need to scale your\nUI development to a lot of teams, which normally only happens for midsize\nto large companies. So my recommendation is to not use this architecture\nfor small projects or companies. If you’re not sure you need microfrontends, you most likely don’t need them. Just start simple; you can\nalways slowly migrate to micro-frontends over time when there’s a need for\nthem.\n\n<h3>\n  At the end of your last micro-frontend project, what worked and what didn’t?\n</h3>\n\nI never officially completed a project using micro-frontends. We are\ncontinuing to evolve the architecture of the platform as the product and\norganization change over time. I consider it nearly impossible to get the\narchitecture right from the start, so you are guaranteed to encounter things\nthat are not working as you might expect. Our current architecture is very\ndifferent than the one we started with three years ago.\n\nWhat really worked well for us was to set up some ways to regularly\ncommunicate and get feedback from other teams. This was crucial in\nadjusting over time and refining the balance on several architectural topics.\nI think we have been too restrictive in some areas, and we had to put some\nmore restrictions in other places to get the results that we wanted. We try to\nkeep a close eye on what’s not working for us and adjust over time to\nimprove the situation.\n\n<h3>\n  What are the must-have tools for developers to have an efficient experience\n  with micro-frontends?\n</h3>\n\nThis depends on a lot of things, because there are many ways you could\nimplement micro-frontends based on the requirements of the project, its\nbusiness requirements, and how your company is organized. But generally\nspeaking, you want to make it as easy as possible for teams to be\nsuccessful, whatever that implies in your context.\n\nAt New Relic, we’ve built a command-line interface that utilizes our\ninternal infrastructure and tools to provide teams with everything they need\nto develop features fast. Almost everything you can think of is automated,\nfrom project creation to the final deployment to production. We are in a\nvery competitive market, so for us, it’s vital to have a fast time to market,\nbe able to quickly iterate on features based on the feedback from the user\nand spend as little time as possible on technical configuration, setup, and\nother repetitive boilerplate.\n\n<h3>\n  What would you suggest for a person who wants to embrace this architecture?\n</h3>\n\nMicro-frontends are not a silver bullet. Just like with any architecture, there\nare many trade-offs to be made. You have to find the right balance between\nthose trade-offs that works best for your project, company culture, and\norganization. What typically happens is that you go from one or several big\ncodebases to many small codebases. That’s why I think it’s important as a\ncompany to make sure you first have the necessary infrastructure, tooling,\nand standardization in place to support this architecture before you make\nthe change.\n\n<h3>\n  What was the impact of introducing micro-frontends to developers who didn’t\n  know about them? What challenges have you faced?\n</h3>\n\nI think people don’t talk about this a lot, but introducing micro-frontends\ncan be quite a cultural and organizational change that requires kind of a\nshift in the way you work. This might come as a surprise sometimes to\ndevelopers who never worked with such an architecture. For us, this was a\nchange that happened slowly over time, so as more and more teams\nonboarded to work on top of the new platform, the company and the people\nslowly transitioned to this new way of working.\n\nEspecially for the teams that were building micro-frontends on top of the\nplatform in the early stages, it was not always easy. They didn’t always\nhave everything they needed and there were still dependencies and things\nthat were blocking them from completing their work. This has improved a\nlot over time, with better communication, documentation, resources, and\nbetter tooling in place to support developers from day one.\n\n<h3>What was the developer experience like in your last project?</h3>\n\nTo build micro-frontends on top of our platform, you have to use a\ncommand-line interface. Both our customers and internal teams can use this\nto extend the platform with all different kinds of micro-frontends. This CLI\nautomatically takes care of the project setup, pipeline build, continuous\nintegration, and continuous delivery. This allows for rapid feature\ndevelopment; you can go from idea to production within hours.\n\nWhen you create a new project, it automatically scaffolds the repository\nwith all the required dependencies, structure, configuration, version control,\nand integration with internal tools. By default, there are many npm scripts\nconfigured to take care of typical developer experience, such as local\ndevelopment, linting, prettifying, bundling, testing, and other automated\ntasks to make sure that what you build will work within the platform. When\nwe do pull requests, we automatically generate URLs to test the changes\nagainst the platform, which makes code review much smoother. Finally,\nwhen a pull request gets merged, we automatically create a release for our\ncontinuous delivery system, which makes it easy to deploy a specific\nversion to any environment, do rollbacks, and so forth.\n\n<h3>\n  Many developers are concerned about performance and design consistency with\n  micro-frontends. What are your suggestions for overcoming these challenges?\n</h3>\n\nAs I mentioned, we don’t have a perfect solution, but we try to reduce the\ndownsides as much as we possibly can in the context of how we implement\nmicro-frontends in New Relic.\n\nMy suggestion would be to carefully evaluate the importance of these\ntopics; based on that, you can define the appropriate constraints on the\nautonomy of the teams that are building micro-frontends. The more\nconstraints you put in place, the more you can reduce the downsides. You\nwill probably end up with a middle-ground solution that is best suited for\nyour project and organization.\n\n<h3>What are the first steps for working with microfrontends?</h3>\n\nIt’s hard to give specific recommendations on how to start working with\nmicro-frontends because this depends so much on the type of project,\nculture, organization, and the size of the company. The way we have\norganized, set up, and architectured our UI development with microfrontends might be a complete disaster for another company.\n\nSome general recommendations for when you get started:\n\n* Make sure you find the right balance of trade-offs that work for\nyou.\n\n* Make sure to communicate and get feedback, so you can adjust\narchitectural decisions to overcome challenges.\n\n* Make sure you have enough infrastructure, tooling, and\nstandardization in place that support this architecture.\n\n<h3>\n  Can you share the main thing to avoid when working with micro-frontends?\n</h3>\n\nThe main goal of micro-frontends is to scale the UI development within the\norganization. So the main thing to avoid is creating dependencies between\nteams or blocking the development of teams in any way.\n\n<h3>\n  What are the main challenges in embracing this architecture from your\n  perspective?\n</h3>\n\nI think the main challenge is to tackle some difficult trade-off decisions,\nwhere you are forced to choose between the autonomy of teams and the\nuser experience of the end users. This is not always easy, but I think with\ntime, you will always find a good middle ground for each of these tradeoffs.\n\n<h3>Would you like to share some useful resources about micro-frontends?</h3>\n\nIf you are reading this, you already have the best resource at hand. I would\nalso recommend your [YouTube talks](https://oreil.ly/AdyzO), especially for those who are new to\nmicro-frontends.\n\n<h3>Micro-frontends in three words...</h3>\n\nScaling UI development.\n\n\n",
    "code": "var Component=(()=>{var cn=Object.create;var W=Object.defineProperty;var ln=Object.getOwnPropertyDescriptor;var un=Object.getOwnPropertyNames;var mn=Object.getPrototypeOf,hn=Object.prototype.hasOwnProperty;var B=(l,t)=>()=>(t||l((t={exports:{}}).exports,t),t.exports),fn=(l,t)=>{for(var p in t)W(l,p,{get:t[p],enumerable:!0})},ve=(l,t,p,_)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let g of un(t))!hn.call(l,g)&&g!==p&&W(l,g,{get:()=>t[g],enumerable:!(_=ln(t,g))||_.enumerable});return l};var bn=(l,t,p)=>(p=l!=null?cn(mn(l)):{},ve(t||!l||!l.__esModule?W(p,\"default\",{value:l,enumerable:!0}):p,l)),pn=l=>ve(W({},\"__esModule\",{value:!0}),l);var xe=B((Nn,Ne)=>{Ne.exports=React});var ke=B(G=>{\"use strict\";(function(){\"use strict\";var l=xe(),t=Symbol.for(\"react.element\"),p=Symbol.for(\"react.portal\"),_=Symbol.for(\"react.fragment\"),g=Symbol.for(\"react.strict_mode\"),J=Symbol.for(\"react.profiler\"),K=Symbol.for(\"react.provider\"),X=Symbol.for(\"react.context\"),R=Symbol.for(\"react.forward_ref\"),A=Symbol.for(\"react.suspense\"),D=Symbol.for(\"react.suspense_list\"),j=Symbol.for(\"react.memo\"),F=Symbol.for(\"react.lazy\"),je=Symbol.for(\"react.offscreen\"),H=Symbol.iterator,Ie=\"@@iterator\";function Se(e){if(e===null||typeof e!=\"object\")return null;var n=H&&e[H]||e[Ie];return typeof n==\"function\"?n:null}var N=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function h(e){{for(var n=arguments.length,a=new Array(n>1?n-1:0),o=1;o<n;o++)a[o-1]=arguments[o];Oe(\"error\",e,a)}}function Oe(e,n,a){{var o=N.ReactDebugCurrentFrame,d=o.getStackAddendum();d!==\"\"&&(n+=\"%s\",a=a.concat([d]));var c=a.map(function(s){return String(s)});c.unshift(\"Warning: \"+n),Function.prototype.apply.call(console[e],console,c)}}var Ce=!1,Pe=!1,We=!1,Ae=!1,De=!1,Q;Q=Symbol.for(\"react.module.reference\");function Fe(e){return!!(typeof e==\"string\"||typeof e==\"function\"||e===_||e===J||De||e===g||e===A||e===D||Ae||e===je||Ce||Pe||We||typeof e==\"object\"&&e!==null&&(e.$$typeof===F||e.$$typeof===j||e.$$typeof===K||e.$$typeof===X||e.$$typeof===R||e.$$typeof===Q||e.getModuleId!==void 0))}function ze(e,n,a){var o=e.displayName;if(o)return o;var d=n.displayName||n.name||\"\";return d!==\"\"?a+\"(\"+d+\")\":a}function Z(e){return e.displayName||\"Context\"}function y(e){if(e==null)return null;if(typeof e.tag==\"number\"&&h(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case _:return\"Fragment\";case p:return\"Portal\";case J:return\"Profiler\";case g:return\"StrictMode\";case A:return\"Suspense\";case D:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case X:var n=e;return Z(n)+\".Consumer\";case K:var a=e;return Z(a._context)+\".Provider\";case R:return ze(e,e.render,\"ForwardRef\");case j:var o=e.displayName||null;return o!==null?o:y(e.type)||\"Memo\";case F:{var d=e,c=d._payload,s=d._init;try{return y(s(c))}catch{return null}}}return null}var v=Object.assign,E=0,ee,ne,te,re,ae,oe,ie;function se(){}se.__reactDisabledLog=!0;function Ue(){{if(E===0){ee=console.log,ne=console.info,te=console.warn,re=console.error,ae=console.group,oe=console.groupCollapsed,ie=console.groupEnd;var e={configurable:!0,enumerable:!0,value:se,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}E++}}function Me(){{if(E--,E===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:v({},e,{value:ee}),info:v({},e,{value:ne}),warn:v({},e,{value:te}),error:v({},e,{value:re}),group:v({},e,{value:ae}),groupCollapsed:v({},e,{value:oe}),groupEnd:v({},e,{value:ie})})}E<0&&h(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var z=N.ReactCurrentDispatcher,U;function I(e,n,a){{if(U===void 0)try{throw Error()}catch(d){var o=d.stack.trim().match(/\\n( *(at )?)/);U=o&&o[1]||\"\"}return`\n`+U+e}}var M=!1,S;{var Ye=typeof WeakMap==\"function\"?WeakMap:Map;S=new Ye}function de(e,n){if(!e||M)return\"\";{var a=S.get(e);if(a!==void 0)return a}var o;M=!0;var d=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var c;c=z.current,z.current=null,Ue();try{if(n){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(w){o=w}Reflect.construct(e,[],s)}else{try{s.call()}catch(w){o=w}e.call(s.prototype)}}else{try{throw Error()}catch(w){o=w}e()}}catch(w){if(w&&o&&typeof w.stack==\"string\"){for(var i=w.stack.split(`\n`),f=o.stack.split(`\n`),u=i.length-1,m=f.length-1;u>=1&&m>=0&&i[u]!==f[m];)m--;for(;u>=1&&m>=0;u--,m--)if(i[u]!==f[m]){if(u!==1||m!==1)do if(u--,m--,m<0||i[u]!==f[m]){var b=`\n`+i[u].replace(\" at new \",\" at \");return e.displayName&&b.includes(\"<anonymous>\")&&(b=b.replace(\"<anonymous>\",e.displayName)),typeof e==\"function\"&&S.set(e,b),b}while(u>=1&&m>=0);break}}}finally{M=!1,z.current=c,Me(),Error.prepareStackTrace=d}var k=e?e.displayName||e.name:\"\",_e=k?I(k):\"\";return typeof e==\"function\"&&S.set(e,_e),_e}function Le(e,n,a){return de(e,!1)}function $e(e){var n=e.prototype;return!!(n&&n.isReactComponent)}function O(e,n,a){if(e==null)return\"\";if(typeof e==\"function\")return de(e,$e(e));if(typeof e==\"string\")return I(e);switch(e){case A:return I(\"Suspense\");case D:return I(\"SuspenseList\")}if(typeof e==\"object\")switch(e.$$typeof){case R:return Le(e.render);case j:return O(e.type,n,a);case F:{var o=e,d=o._payload,c=o._init;try{return O(c(d),n,a)}catch{}}}return\"\"}var C=Object.prototype.hasOwnProperty,ce={},le=N.ReactDebugCurrentFrame;function P(e){if(e){var n=e._owner,a=O(e.type,e._source,n?n.type:null);le.setExtraStackFrame(a)}else le.setExtraStackFrame(null)}function qe(e,n,a,o,d){{var c=Function.call.bind(C);for(var s in e)if(c(e,s)){var i=void 0;try{if(typeof e[s]!=\"function\"){var f=Error((o||\"React class\")+\": \"+a+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw f.name=\"Invariant Violation\",f}i=e[s](n,s,o,a,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(u){i=u}i&&!(i instanceof Error)&&(P(d),h(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",o||\"React class\",a,s,typeof i),P(null)),i instanceof Error&&!(i.message in ce)&&(ce[i.message]=!0,P(d),h(\"Failed %s type: %s\",a,i.message),P(null))}}}var Ve=Array.isArray;function Y(e){return Ve(e)}function Be(e){{var n=typeof Symbol==\"function\"&&Symbol.toStringTag,a=n&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return a}}function Ge(e){try{return ue(e),!1}catch{return!0}}function ue(e){return\"\"+e}function me(e){if(Ge(e))return h(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Be(e)),ue(e)}var T=N.ReactCurrentOwner,Je={key:!0,ref:!0,__self:!0,__source:!0},he,fe,L;L={};function Ke(e){if(C.call(e,\"ref\")){var n=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(n&&n.isReactWarning)return!1}return e.ref!==void 0}function Xe(e){if(C.call(e,\"key\")){var n=Object.getOwnPropertyDescriptor(e,\"key\").get;if(n&&n.isReactWarning)return!1}return e.key!==void 0}function He(e,n){if(typeof e.ref==\"string\"&&T.current&&n&&T.current.stateNode!==n){var a=y(T.current.type);L[a]||(h('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',y(T.current.type),e.ref),L[a]=!0)}}function Qe(e,n){{var a=function(){he||(he=!0,h(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",n))};a.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:a,configurable:!0})}}function Ze(e,n){{var a=function(){fe||(fe=!0,h(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",n))};a.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:a,configurable:!0})}}var en=function(e,n,a,o,d,c,s){var i={$$typeof:t,type:e,key:n,ref:a,props:s,_owner:c};return i._store={},Object.defineProperty(i._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(i,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(i,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:d}),Object.freeze&&(Object.freeze(i.props),Object.freeze(i)),i};function nn(e,n,a,o,d){{var c,s={},i=null,f=null;a!==void 0&&(me(a),i=\"\"+a),Xe(n)&&(me(n.key),i=\"\"+n.key),Ke(n)&&(f=n.ref,He(n,d));for(c in n)C.call(n,c)&&!Je.hasOwnProperty(c)&&(s[c]=n[c]);if(e&&e.defaultProps){var u=e.defaultProps;for(c in u)s[c]===void 0&&(s[c]=u[c])}if(i||f){var m=typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e;i&&Qe(s,m),f&&Ze(s,m)}return en(e,i,f,d,o,T.current,s)}}var $=N.ReactCurrentOwner,be=N.ReactDebugCurrentFrame;function x(e){if(e){var n=e._owner,a=O(e.type,e._source,n?n.type:null);be.setExtraStackFrame(a)}else be.setExtraStackFrame(null)}var q;q=!1;function V(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===t}function pe(){{if($.current){var e=y($.current.type);if(e)return`\n\nCheck the render method of \\``+e+\"`.\"}return\"\"}}function tn(e){{if(e!==void 0){var n=e.fileName.replace(/^.*[\\\\\\/]/,\"\"),a=e.lineNumber;return`\n\nCheck your code at `+n+\":\"+a+\".\"}return\"\"}}var ye={};function rn(e){{var n=pe();if(!n){var a=typeof e==\"string\"?e:e.displayName||e.name;a&&(n=`\n\nCheck the top-level render call using <`+a+\">.\")}return n}}function we(e,n){{if(!e._store||e._store.validated||e.key!=null)return;e._store.validated=!0;var a=rn(n);if(ye[a])return;ye[a]=!0;var o=\"\";e&&e._owner&&e._owner!==$.current&&(o=\" It was passed a child from \"+y(e._owner.type)+\".\"),x(e),h('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',a,o),x(null)}}function ge(e,n){{if(typeof e!=\"object\")return;if(Y(e))for(var a=0;a<e.length;a++){var o=e[a];V(o)&&we(o,n)}else if(V(e))e._store&&(e._store.validated=!0);else if(e){var d=Se(e);if(typeof d==\"function\"&&d!==e.entries)for(var c=d.call(e),s;!(s=c.next()).done;)V(s.value)&&we(s.value,n)}}}function an(e){{var n=e.type;if(n==null||typeof n==\"string\")return;var a;if(typeof n==\"function\")a=n.propTypes;else if(typeof n==\"object\"&&(n.$$typeof===R||n.$$typeof===j))a=n.propTypes;else return;if(a){var o=y(n);qe(a,e.props,\"prop\",o,e)}else if(n.PropTypes!==void 0&&!q){q=!0;var d=y(n);h(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",d||\"Unknown\")}typeof n.getDefaultProps==\"function\"&&!n.getDefaultProps.isReactClassApproved&&h(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function on(e){{for(var n=Object.keys(e.props),a=0;a<n.length;a++){var o=n[a];if(o!==\"children\"&&o!==\"key\"){x(e),h(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",o),x(null);break}}e.ref!==null&&(x(e),h(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),x(null))}}function sn(e,n,a,o,d,c){{var s=Fe(e);if(!s){var i=\"\";(e===void 0||typeof e==\"object\"&&e!==null&&Object.keys(e).length===0)&&(i+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var f=tn(d);f?i+=f:i+=pe();var u;e===null?u=\"null\":Y(e)?u=\"array\":e!==void 0&&e.$$typeof===t?(u=\"<\"+(y(e.type)||\"Unknown\")+\" />\",i=\" Did you accidentally export a JSX literal instead of a component?\"):u=typeof e,h(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",u,i)}var m=nn(e,n,a,d,c);if(m==null)return m;if(s){var b=n.children;if(b!==void 0)if(o)if(Y(b)){for(var k=0;k<b.length;k++)ge(b[k],e);Object.freeze&&Object.freeze(b)}else h(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else ge(b,e)}return e===_?on(m):an(m),m}}var dn=sn;G.Fragment=_,G.jsxDEV=dn})()});var Te=B((kn,Ee)=>{\"use strict\";Ee.exports=ke()});var _n={};fn(_n,{default:()=>gn,frontmatter:()=>yn});var r=bn(Te()),yn={title:\"Erik Grijzen - Software Engineer\",category:\"nested\",parent:\"what-other-say-about-micro-frontend\"};function Re(l){let t=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",a:\"a\"},l.components);return(0,r.jsxDEV)(r.Fragment,{children:[(0,r.jsxDEV)(\"div\",{className:\"bg-blue-600 border-blue-950 border-r-4 border-b-4 px-4 py-2\",children:\"Read this summary\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:7,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:\"At New Relic, we adopted a micro-frontends architecture to address issues related to user experience consistency, UI extensibility, and inefficiencies in development. Our previous monolithic single-page applications resulted in inconsistent UI and forced users to switch between different apps, losing context. By shifting to micro-frontends, we enabled teams to work autonomously, focusing on specific business domains, which sped up development and improved code quality. Automation and standardization were crucial to managing the resulting multiple codebases, allowing teams to build faster with less repetitive work.\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:9,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:\"While micro-frontends provided significant benefits like team autonomy and easier scaling, we faced challenges in maintaining UX consistency and performance. To mitigate this, we introduced constraints, such as requiring teams to use specific technologies and maintaining a centralized design system. We also optimized performance through strategies like lazy loading, code-splitting, and deduplicating dependencies. This architecture worked well for large-scale development but comes with trade-offs that smaller projects may not need. Proper infrastructure, tools, and communication are essential for success with micro-frontends.\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:11,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"hr\",{},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:13,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:\"What is your experience with micro-frontends?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`My experience with micro-frontends has been solely working on this new\nplatform within New Relic over the last three years. Let me give you some\ncontext on how we ended up deciding to use this architecture, because I\nthink this is quite interesting and I believe many other companies find\nthemselves in a similar position.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:17,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`New Relic is a fast-growing company, and in the last 10 years, it has built\nmany different products. All these products were built separately as\nmonolithic single-page applications that were linked together through one\ncommon navigation. This approach was very successful until more or less\nthree years ago, when we discovered that we had several problems related\nto the consistency of our user experience, extensibility of our UI, and the\nway we did UI development within our company. Let me go over each one\nof these problems to explain them a bit more in depth.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:23,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Many of our customers were starting to have more and more complex\nsystems because they were adapting to a microservices architecture and\nmoving towards the cloud. As a result of this, our users were forced to\nswitch constantly between our separate applications to troubleshoot\nproblems in their systems. Despite all the best efforts of our UI engineers,\nour products were all working and looking slightly different (in some cases\nvery different), which led to undesirable user experiences. On top of that,\nswitching between applications also caused our users to lose the context of\nthe issues that they were troubleshooting, which was an even bigger\nproblem.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:32,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`The landscape of technology (software, tools, programming languages,\nintegrations, open source, etc.) that our customers wanted to instrument and\nobserve was (and still is) exploding. It\\u2019s almost impossible to keep up, so it\nwas clear that we wanted a new approach where we could provide new\nfunctionality for our users in an easy and fast manner. Besides that, we also\nnoticed that some customers had very specific use cases that only applied to\nthem. To also cover these cases, we wanted to provide a way to make our\nuser interfaces programmable so that they could extend the platform for\ntheir specific needs.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:43,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`We also saw that inside our company, many UI engineers were doing a lot\nof duplicate efforts regarding project setup, tooling, configuration, etc. We\nwanted to reduce the toil and boilerplate that each team has to go through to\nbuild new features so that they could spend more time on building\ninnovative and creative product solutions for our users.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`It turned out that a micro-frontends architecture was a perfect fit for us to\ntackle these problems. Users are demanding more unified product\nexperiences, but it\\u2019s not easy to build a product with hundreds of UI\nengineers at the same time, especially when they are located in different\noffices around the world and in different time zones. And in our case,\nallowing customers to build on top of the platform as well made the\nproblem even more difficult. In the end, we decided that a micro-frontend\narchitecture was how we wanted to scale our UI development within our\norganization.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`What benefits and pitfalls did you encounter in your journey with\nmicro-frontends?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:70,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`In our experience, this architecture has very similar benefits and downsides\nthat you can expect from using a microservices architecture on the backend.\nHowever, there are a few exceptions to this due to the nature of how\nbrowsers work.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:74,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Let\\u2019s start with the benefits. I believe the main topics that we should cover\nwhere we noticed the biggest differences are the following:`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:79,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.ul,{children:[`\n`,(0,r.jsxDEV)(t.li,{children:\"Team autonomy\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:82,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:\"Small and decoupled codebases\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:83,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:\"Modeled around a business domain\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:84,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:\"Automation and standardization\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:85,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:82,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`To scale the UI development inside our organization, the most important\nthing we wanted to achieve was for teams to work autonomously. They\nshould be able to deploy new code whenever and as many times as they\nwant without depending on any other team. Each team should be crossfunctional, meaning they have every role (designer, frontend engineer,\nbackend engineer, QA engineer, etc.) on the team to build the functionality\nthey want, so that they can do a complete end-to-end implementation. This\nmeans they have full ownership and can take all the responsibility for one\nor more related micro-frontends that are part of a specific business domain.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:87,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`This is important because this allows parallel development without slowing\ndown when more and more teams are working on our platform.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:96,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`To achieve this autonomy from a technical point of view, the microfrontends must be loosely coupled, so that they don\\u2019t depend on each other,\nand whenever they interact they should have clear contracts. Each microfrontend is also small in size so that they are easier to reason about (you\ndon\\u2019t need to know the whole system), easier to test, and you can easily\nadd, change, or remove them over time.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:99,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Our micro-frontends are modeled around a business domain or subdomain,\nbecause this aligns better with the structure of our business. It creates fewer\nteam dependencies, gives teams more autonomy, and improves the\ncommunication to make quick decisions so that teams can iterate over\nfeatures faster. To give a more concrete example, one team could be\norganized around the domain of NodeJS application monitoring. They are\nhighly specialized and are subject-matter experts on that topic, which\ntypically results in higher-quality code and better solutions for our end\nusers.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:104,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`With our micro-frontend architecture setup, we moved from several\nmonolithic single-page applications to many small micro-frontends that are\ncomposed at runtime into one unified platform. This resulted in an\nexplosion of a lot of small codebases, which are each owned by separate\nteams. It was very important to be prepared for this because this\narchitecture introduces a lot of repetitive work and duplication. That\\u2019s why\nit\\u2019s very important to have the proper infrastructure, tools, and\nstandardization in place. We automated every step in the development\nprocess, from project creation and pipeline build to continuous integration\nand continuous deployment, basically providing everything that the team\nneeds, so they can focus on building functionality that our users love.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:114,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:\"Let\\u2019s move now to some of the pitfalls we encountered using microfrontends. In our journey, the two hardest parts were:\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:126,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.ul,{children:[`\n`,(0,r.jsxDEV)(t.li,{children:\"UX consistency\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:128,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:\"Performance\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:129,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:128,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Every architecture comes with trade-offs. I don\\u2019t think we have a perfect\nsolution to make the UI always consistent and performant, but we try to\nmitigate the downsides as much as we can. In most cases, this means\nputting certain constraints in place and reducing the autonomy of teams. For\nexample, we have a constraint in place that every team should use a specific\nversion of the ReactJS library to build their user interfaces. This obviously\nlimits the teams from using any technology they want, but we think it\\u2019s\nworth it because this constraint reduces the performance costs a lot for our\nusers. We don\\u2019t want to limit innovation in the organization, but when we\ntry out new technologies and we carefully evaluate the impact it has on the\nsystem, we then update the organization standards and move this innovation\nto the platform level, so that everyone can benefit from it.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:131,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`When you have many teams working on the same platform, the consistency\nof the UI is at risk. To reduce this downside as much as possible, we think\nit\\u2019s critical to at least have a design system in place. This won\\u2019t magically\nmake everything consistent, but I think without it, you will definitely be in a\nworld of trouble. In our experience, this design system is best owned and\nmaintained by one team. This doesn\\u2019t mean others cannot contribute, but\nthere\\u2019s one team making sure it aligns with the bigger picture.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:144,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`We\\u2019ve tried an open source model where everyone could contribute to the\ndesign system, but this didn\\u2019t work out for us, because when everyone is\nresponsible for it, nobody is responsible for it. Maintenance work, bug\nfixes, and keeping everything aligned with the bigger picture are especially\nhard to do in this setup. To further improve consistency, we also\nimplemented an SDK that all micro-frontends have access to. This SDK has\nall the UI components from our design system and provides several APIs to\nstandardize certain patterns such as navigating around the platform.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:152,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`To make sure our platform stays as performant as possible, we have several\nthings in place. First of all, the platform is built with the application shell\nmodel, which makes it very minimal and fast-loading to achieve a good\ninitial perceived performance for the users. When the platform is loaded, we\nlazy-load the micro-frontends based on the client-side routing, which allows\nus to only load the minimal JavaScript and CSS necessary to render the\nscreen. To reduce the payload size of the assets we load and memory\nconsumption of the application, we think it\\u2019s necessary to deduplicate the\nfrontend dependencies as much as possible. On the platform level, we\nprovide some dependencies (i.e., ReactJS) that we are sure every microfrontend is going to need. We do that by defining those dependencies as\nwebpack externals so that these don\\u2019t get bundled up for each microfrontend. This alone reduces the bundle sizes by an incredible amount. For\neach repository that contains micro-frontends, we are code-splitting the\nbundles so that we can lazy-load them incrementally at runtime inside the\nplatform. The last thing we do is provide the previously mentioned SDK on\nthe platform level by injecting it in each micro-frontend. This reduces the\nneed to use other npm dependencies, which should decrease bundle sizes\neven more.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:161,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`Did you contribute to any OSS project related to microfrontends? If so, which\none?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:180,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:179,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`No, I\\u2019m not contributing to any open source projects at the moment. I\nlooked into several of the bigger micro-frontend frameworks and libraries a\nwhile back, but none of them really matched with how we wanted this\narchitecture to look for our platform.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:184,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`I\\u2019ve been asked several times if we will open source what we\\u2019ve built at\nNew Relic. Unfortunately, we don\\u2019t have any plans to do so. I think that\nwhat we have right now is too tailored for our needs, and we would have to\nchange it quite a bit before it would make sense to release it to the public.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:189,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:\"When would you suggest using micro-frontends, and when should we avoid them?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:195,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:194,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Using an architecture like this comes with a lot of trade-offs that have to be\nevaluated carefully and need to make sense for your project and company.\nTypically, the benefits outweigh the downsides when you need to scale your\nUI development to a lot of teams, which normally only happens for midsize\nto large companies. So my recommendation is to not use this architecture\nfor small projects or companies. If you\\u2019re not sure you need microfrontends, you most likely don\\u2019t need them. Just start simple; you can\nalways slowly migrate to micro-frontends over time when there\\u2019s a need for\nthem.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:198,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:\"At the end of your last micro-frontend project, what worked and what didn\\u2019t?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:208,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:207,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`I never officially completed a project using micro-frontends. We are\ncontinuing to evolve the architecture of the platform as the product and\norganization change over time. I consider it nearly impossible to get the\narchitecture right from the start, so you are guaranteed to encounter things\nthat are not working as you might expect. Our current architecture is very\ndifferent than the one we started with three years ago.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:211,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`What really worked well for us was to set up some ways to regularly\ncommunicate and get feedback from other teams. This was crucial in\nadjusting over time and refining the balance on several architectural topics.\nI think we have been too restrictive in some areas, and we had to put some\nmore restrictions in other places to get the results that we wanted. We try to\nkeep a close eye on what\\u2019s not working for us and adjust over time to\nimprove the situation.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:218,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`What are the must-have tools for developers to have an efficient experience\nwith micro-frontends?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:227,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:226,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`This depends on a lot of things, because there are many ways you could\nimplement micro-frontends based on the requirements of the project, its\nbusiness requirements, and how your company is organized. But generally\nspeaking, you want to make it as easy as possible for teams to be\nsuccessful, whatever that implies in your context.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:231,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`At New Relic, we\\u2019ve built a command-line interface that utilizes our\ninternal infrastructure and tools to provide teams with everything they need\nto develop features fast. Almost everything you can think of is automated,\nfrom project creation to the final deployment to production. We are in a\nvery competitive market, so for us, it\\u2019s vital to have a fast time to market,\nbe able to quickly iterate on features based on the feedback from the user\nand spend as little time as possible on technical configuration, setup, and\nother repetitive boilerplate.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:237,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:\"What would you suggest for a person who wants to embrace this architecture?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:247,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:246,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Micro-frontends are not a silver bullet. Just like with any architecture, there\nare many trade-offs to be made. You have to find the right balance between\nthose trade-offs that works best for your project, company culture, and\norganization. What typically happens is that you go from one or several big\ncodebases to many small codebases. That\\u2019s why I think it\\u2019s important as a\ncompany to make sure you first have the necessary infrastructure, tooling,\nand standardization in place to support this architecture before you make\nthe change.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:250,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`What was the impact of introducing micro-frontends to developers who didn\\u2019t\nknow about them? What challenges have you faced?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:260,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:259,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`I think people don\\u2019t talk about this a lot, but introducing micro-frontends\ncan be quite a cultural and organizational change that requires kind of a\nshift in the way you work. This might come as a surprise sometimes to\ndevelopers who never worked with such an architecture. For us, this was a\nchange that happened slowly over time, so as more and more teams\nonboarded to work on top of the new platform, the company and the people\nslowly transitioned to this new way of working.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:264,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`Especially for the teams that were building micro-frontends on top of the\nplatform in the early stages, it was not always easy. They didn\\u2019t always\nhave everything they needed and there were still dependencies and things\nthat were blocking them from completing their work. This has improved a\nlot over time, with better communication, documentation, resources, and\nbetter tooling in place to support developers from day one.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:272,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:\"What was the developer experience like in your last project?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:279,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`To build micro-frontends on top of our platform, you have to use a\ncommand-line interface. Both our customers and internal teams can use this\nto extend the platform with all different kinds of micro-frontends. This CLI\nautomatically takes care of the project setup, pipeline build, continuous\nintegration, and continuous delivery. This allows for rapid feature\ndevelopment; you can go from idea to production within hours.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:281,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`When you create a new project, it automatically scaffolds the repository\nwith all the required dependencies, structure, configuration, version control,\nand integration with internal tools. By default, there are many npm scripts\nconfigured to take care of typical developer experience, such as local\ndevelopment, linting, prettifying, bundling, testing, and other automated\ntasks to make sure that what you build will work within the platform. When\nwe do pull requests, we automatically generate URLs to test the changes\nagainst the platform, which makes code review much smoother. Finally,\nwhen a pull request gets merged, we automatically create a release for our\ncontinuous delivery system, which makes it easy to deploy a specific\nversion to any environment, do rollbacks, and so forth.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:288,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`Many developers are concerned about performance and design consistency with\nmicro-frontends. What are your suggestions for overcoming these challenges?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:301,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:300,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`As I mentioned, we don\\u2019t have a perfect solution, but we try to reduce the\ndownsides as much as we possibly can in the context of how we implement\nmicro-frontends in New Relic.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:305,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`My suggestion would be to carefully evaluate the importance of these\ntopics; based on that, you can define the appropriate constraints on the\nautonomy of the teams that are building micro-frontends. The more\nconstraints you put in place, the more you can reduce the downsides. You\nwill probably end up with a middle-ground solution that is best suited for\nyour project and organization.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:309,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:\"What are the first steps for working with microfrontends?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:316,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`It\\u2019s hard to give specific recommendations on how to start working with\nmicro-frontends because this depends so much on the type of project,\nculture, organization, and the size of the company. The way we have\norganized, set up, and architectured our UI development with microfrontends might be a complete disaster for another company.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:318,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:\"Some general recommendations for when you get started:\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:323,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.ul,{children:[`\n`,(0,r.jsxDEV)(t.li,{children:[`\n`,(0,r.jsxDEV)(t.p,{children:`Make sure you find the right balance of trade-offs that work for\nyou.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:325,columnNumber:3},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:325,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:[`\n`,(0,r.jsxDEV)(t.p,{children:`Make sure to communicate and get feedback, so you can adjust\narchitectural decisions to overcome challenges.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:328,columnNumber:3},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:328,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.li,{children:[`\n`,(0,r.jsxDEV)(t.p,{children:`Make sure you have enough infrastructure, tooling, and\nstandardization in place that support this architecture.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:331,columnNumber:3},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:331,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:325,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:\"Can you share the main thing to avoid when working with micro-frontends?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:335,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:334,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`The main goal of micro-frontends is to scale the UI development within the\norganization. So the main thing to avoid is creating dependencies between\nteams or blocking the development of teams in any way.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:338,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:(0,r.jsxDEV)(t.p,{children:`What are the main challenges in embracing this architecture from your\nperspective?`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:343,columnNumber:3},this)},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:342,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:`I think the main challenge is to tackle some difficult trade-off decisions,\nwhere you are forced to choose between the autonomy of teams and the\nuser experience of the end users. This is not always easy, but I think with\ntime, you will always find a good middle ground for each of these tradeoffs.`},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:347,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:\"Would you like to share some useful resources about micro-frontends?\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:352,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:[`If you are reading this, you already have the best resource at hand. I would\nalso recommend your `,(0,r.jsxDEV)(t.a,{href:\"https://oreil.ly/AdyzO\",children:\"YouTube talks\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:355,columnNumber:21},this),`, especially for those who are new to\nmicro-frontends.`]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:354,columnNumber:1},this),`\n`,(0,r.jsxDEV)(\"h3\",{children:\"Micro-frontends in three words...\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:358,columnNumber:1},this),`\n`,(0,r.jsxDEV)(t.p,{children:\"Scaling UI development.\"},void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:360,columnNumber:1},this)]},void 0,!0,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\",lineNumber:1,columnNumber:1},this)}function wn(l={}){let{wrapper:t}=l.components||{};return t?(0,r.jsxDEV)(t,Object.assign({},l,{children:(0,r.jsxDEV)(Re,l,void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\"},this)}),void 0,!1,{fileName:\"/home/sina/git/reactandme/src/posts/what-other-say-about-micro-frontend/_mdx_bundler_entry_point-02777527-1c6d-4341-9ec5-dbba44a8c5a6.mdx\"},this):Re(l)}var gn=wn;return pn(_n);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "what-other-say-about-micro-frontend/erik-grijzen.mdx",
  "_raw": {
    "sourceFilePath": "what-other-say-about-micro-frontend/erik-grijzen.mdx",
    "sourceFileName": "erik-grijzen.mdx",
    "sourceFileDir": "what-other-say-about-micro-frontend",
    "contentType": "mdx",
    "flattenedPath": "what-other-say-about-micro-frontend/erik-grijzen"
  },
  "type": "Post",
  "url": "/posts/what-other-say-about-micro-frontend/erik-grijzen"
}